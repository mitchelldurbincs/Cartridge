// This file is @generated by prost-build.
/// Engine identification and versioning
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EngineId {
    /// Unique environment identifier (e.g., "tictactoe")
    #[prost(string, tag = "1")]
    pub env_id: ::prost::alloc::string::String,
    /// Build version for reproducibility
    #[prost(string, tag = "2")]
    pub build_id: ::prost::alloc::string::String,
}
/// Encoding format specifications for data serialization
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Encoding {
    /// State encoding format (e.g., "packed_u8:v1")
    #[prost(string, tag = "1")]
    pub state: ::prost::alloc::string::String,
    /// Action encoding format (e.g., "discrete:v1")
    #[prost(string, tag = "2")]
    pub action: ::prost::alloc::string::String,
    /// Observation encoding format (e.g., "f32x27:v1")
    #[prost(string, tag = "3")]
    pub obs: ::prost::alloc::string::String,
    /// Schema version for evolution tracking
    #[prost(uint32, tag = "4")]
    pub schema_version: u32,
}
/// Multi-dimensional discrete action space specification
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiDiscrete {
    /// Number of discrete actions per dimension
    #[prost(uint32, repeated, tag = "1")]
    pub nvec: ::prost::alloc::vec::Vec<u32>,
}
/// Continuous action space specification (Box space)
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoxSpec {
    /// Lower bounds for each dimension
    #[prost(float, repeated, tag = "1")]
    pub low: ::prost::alloc::vec::Vec<f32>,
    /// Upper bounds for each dimension
    #[prost(float, repeated, tag = "2")]
    pub high: ::prost::alloc::vec::Vec<f32>,
    /// Shape of the action space
    #[prost(uint32, repeated, tag = "3")]
    pub shape: ::prost::alloc::vec::Vec<u32>,
}
/// Game capabilities and configuration
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Capabilities {
    /// Engine identification
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<EngineId>,
    /// Data encoding specifications
    #[prost(message, optional, tag = "2")]
    pub enc: ::core::option::Option<Encoding>,
    /// Maximum episode length
    #[prost(uint32, tag = "3")]
    pub max_horizon: u32,
    /// Preferred batch size for optimal performance
    #[prost(uint32, tag = "20")]
    pub preferred_batch: u32,
    /// Action space specification (exactly one must be set)
    #[prost(oneof = "capabilities::ActionSpace", tags = "10, 11, 12")]
    pub action_space: ::core::option::Option<capabilities::ActionSpace>,
}
/// Nested message and enum types in `Capabilities`.
pub mod capabilities {
    /// Action space specification (exactly one must be set)
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ActionSpace {
        /// Discrete action space with n actions
        #[prost(uint32, tag = "10")]
        DiscreteN(u32),
        /// Multi-dimensional discrete
        #[prost(message, tag = "11")]
        Multi(super::MultiDiscrete),
        /// Continuous action space
        #[prost(message, tag = "12")]
        Continuous(super::BoxSpec),
    }
}
/// Request to reset environment to initial state
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResetRequest {
    /// Engine to reset
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<EngineId>,
    /// Random seed for deterministic reset
    #[prost(uint64, tag = "2")]
    pub seed: u64,
    /// Optional hint data for environment setup
    #[prost(bytes = "vec", tag = "3")]
    pub hint: ::prost::alloc::vec::Vec<u8>,
}
/// Response from environment reset
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResetResponse {
    /// Initial state encoded as bytes
    #[prost(bytes = "vec", tag = "1")]
    pub state: ::prost::alloc::vec::Vec<u8>,
    /// Initial observation encoded as bytes
    #[prost(bytes = "vec", tag = "2")]
    pub obs: ::prost::alloc::vec::Vec<u8>,
}
/// Request to perform one simulation step
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StepRequest {
    /// Engine to step
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<EngineId>,
    /// Current state encoded as bytes
    #[prost(bytes = "vec", tag = "2")]
    pub state: ::prost::alloc::vec::Vec<u8>,
    /// Action to take encoded as bytes
    #[prost(bytes = "vec", tag = "3")]
    pub action: ::prost::alloc::vec::Vec<u8>,
}
/// Response from one simulation step
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StepResponse {
    /// New state encoded as bytes
    #[prost(bytes = "vec", tag = "1")]
    pub state: ::prost::alloc::vec::Vec<u8>,
    /// New observation encoded as bytes
    #[prost(bytes = "vec", tag = "2")]
    pub obs: ::prost::alloc::vec::Vec<u8>,
    /// Reward received from this step
    #[prost(float, tag = "3")]
    pub reward: f32,
    /// Whether episode has terminated
    #[prost(bool, tag = "4")]
    pub done: bool,
}
/// Single trajectory configuration for batch simulation
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrajectoryConfig {
    /// Random seed for this trajectory
    #[prost(uint64, tag = "1")]
    pub seed: u64,
    /// Optional setup hint
    #[prost(bytes = "vec", tag = "2")]
    pub hint: ::prost::alloc::vec::Vec<u8>,
    /// Maximum steps before forced termination
    #[prost(uint32, tag = "3")]
    pub max_steps: u32,
}
/// Request for batch simulation of multiple trajectories
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchSimulateRequest {
    /// Engine to use
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<EngineId>,
    /// Configurations for each trajectory
    #[prost(message, repeated, tag = "2")]
    pub trajectories: ::prost::alloc::vec::Vec<TrajectoryConfig>,
    /// Whether to include states in response
    #[prost(bool, tag = "3")]
    pub return_states: bool,
    /// Whether to include observations
    #[prost(bool, tag = "4")]
    pub return_observations: bool,
}
/// Single step within a trajectory result
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimStep {
    /// State at this step (if requested)
    #[prost(bytes = "vec", tag = "1")]
    pub state: ::prost::alloc::vec::Vec<u8>,
    /// Action taken at this step
    #[prost(bytes = "vec", tag = "2")]
    pub action: ::prost::alloc::vec::Vec<u8>,
    /// Observation at this step (if requested)
    #[prost(bytes = "vec", tag = "3")]
    pub obs: ::prost::alloc::vec::Vec<u8>,
    /// Reward received
    #[prost(float, tag = "4")]
    pub reward: f32,
    /// Whether episode terminated
    #[prost(bool, tag = "5")]
    pub done: bool,
}
/// Complete trajectory result
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrajectoryResult {
    /// Index of this trajectory in the batch
    #[prost(uint32, tag = "1")]
    pub trajectory_id: u32,
    /// All steps in the trajectory
    #[prost(message, repeated, tag = "2")]
    pub steps: ::prost::alloc::vec::Vec<SimStep>,
    /// Total number of steps taken
    #[prost(uint32, tag = "3")]
    pub total_steps: u32,
    /// Sum of all rewards in trajectory
    #[prost(float, tag = "4")]
    pub total_reward: f32,
}
/// Streaming chunk of simulation results
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimResultChunk {
    /// Completed trajectories in this chunk
    #[prost(message, repeated, tag = "1")]
    pub trajectories: ::prost::alloc::vec::Vec<TrajectoryResult>,
    /// Whether this is the last chunk
    #[prost(bool, tag = "2")]
    pub final_chunk: bool,
}
/// Generated client implementations.
pub mod engine_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Engine service definition
    #[derive(Debug, Clone)]
    pub struct EngineClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl EngineClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> EngineClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> EngineClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            EngineClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Get engine capabilities and configuration
        pub async fn get_capabilities(
            &mut self,
            request: impl tonic::IntoRequest<super::EngineId>,
        ) -> std::result::Result<tonic::Response<super::Capabilities>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/engine.v1.Engine/GetCapabilities",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("engine.v1.Engine", "GetCapabilities"));
            self.inner.unary(req, path, codec).await
        }
        /// Reset environment to initial state
        pub async fn reset(
            &mut self,
            request: impl tonic::IntoRequest<super::ResetRequest>,
        ) -> std::result::Result<tonic::Response<super::ResetResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/engine.v1.Engine/Reset");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("engine.v1.Engine", "Reset"));
            self.inner.unary(req, path, codec).await
        }
        /// Perform single simulation step
        pub async fn step(
            &mut self,
            request: impl tonic::IntoRequest<super::StepRequest>,
        ) -> std::result::Result<tonic::Response<super::StepResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/engine.v1.Engine/Step");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("engine.v1.Engine", "Step"));
            self.inner.unary(req, path, codec).await
        }
        /// Perform batch simulation with streaming results
        pub async fn batch_simulate(
            &mut self,
            request: impl tonic::IntoRequest<super::BatchSimulateRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SimResultChunk>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/engine.v1.Engine/BatchSimulate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("engine.v1.Engine", "BatchSimulate"));
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod engine_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with EngineServer.
    #[async_trait]
    pub trait Engine: Send + Sync + 'static {
        /// Get engine capabilities and configuration
        async fn get_capabilities(
            &self,
            request: tonic::Request<super::EngineId>,
        ) -> std::result::Result<tonic::Response<super::Capabilities>, tonic::Status>;
        /// Reset environment to initial state
        async fn reset(
            &self,
            request: tonic::Request<super::ResetRequest>,
        ) -> std::result::Result<tonic::Response<super::ResetResponse>, tonic::Status>;
        /// Perform single simulation step
        async fn step(
            &self,
            request: tonic::Request<super::StepRequest>,
        ) -> std::result::Result<tonic::Response<super::StepResponse>, tonic::Status>;
        /// Server streaming response type for the BatchSimulate method.
        type BatchSimulateStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::SimResultChunk, tonic::Status>,
            >
            + Send
            + 'static;
        /// Perform batch simulation with streaming results
        async fn batch_simulate(
            &self,
            request: tonic::Request<super::BatchSimulateRequest>,
        ) -> std::result::Result<
            tonic::Response<Self::BatchSimulateStream>,
            tonic::Status,
        >;
    }
    /// Engine service definition
    #[derive(Debug)]
    pub struct EngineServer<T: Engine> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: Engine> EngineServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for EngineServer<T>
    where
        T: Engine,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/engine.v1.Engine/GetCapabilities" => {
                    #[allow(non_camel_case_types)]
                    struct GetCapabilitiesSvc<T: Engine>(pub Arc<T>);
                    impl<T: Engine> tonic::server::UnaryService<super::EngineId>
                    for GetCapabilitiesSvc<T> {
                        type Response = super::Capabilities;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::EngineId>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Engine>::get_capabilities(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetCapabilitiesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/engine.v1.Engine/Reset" => {
                    #[allow(non_camel_case_types)]
                    struct ResetSvc<T: Engine>(pub Arc<T>);
                    impl<T: Engine> tonic::server::UnaryService<super::ResetRequest>
                    for ResetSvc<T> {
                        type Response = super::ResetResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ResetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Engine>::reset(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ResetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/engine.v1.Engine/Step" => {
                    #[allow(non_camel_case_types)]
                    struct StepSvc<T: Engine>(pub Arc<T>);
                    impl<T: Engine> tonic::server::UnaryService<super::StepRequest>
                    for StepSvc<T> {
                        type Response = super::StepResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StepRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Engine>::step(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = StepSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/engine.v1.Engine/BatchSimulate" => {
                    #[allow(non_camel_case_types)]
                    struct BatchSimulateSvc<T: Engine>(pub Arc<T>);
                    impl<
                        T: Engine,
                    > tonic::server::ServerStreamingService<super::BatchSimulateRequest>
                    for BatchSimulateSvc<T> {
                        type Response = super::SimResultChunk;
                        type ResponseStream = T::BatchSimulateStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BatchSimulateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Engine>::batch_simulate(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = BatchSimulateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: Engine> Clone for EngineServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: Engine> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: Engine> tonic::server::NamedService for EngineServer<T> {
        const NAME: &'static str = "engine.v1.Engine";
    }
}
